#link "SDL2"
#link "GL"
#link "pthread"

#use gl

// C bindings
[c] func printf(fmt: str, ...) -> int;

// SDL
type SDL_Window struct {};
type SDL_Surface struct {
	format: ^SDL_PixelFormat,
};
type SDL_PixelFormat struct {};
type SDL_GLContext struct {};

SDL_INIT_EVERYTHING := 0x0000FFFF;
SDL_WINDOWPOS_CENTERED := 0x2FFF0000;

SDL_GL_RED_SIZE := 0;
SDL_GL_GREEN_SIZE := 1;
SDL_GL_BLUE_SIZE := 2;
SDL_GL_ALPHA_SIZE := 3;
SDL_WINDOW_OPENGL := 0x00000002;
SDL_GL_CONTEXT_MAJOR_VERSION := 17;
SDL_GL_CONTEXT_MINOR_VERSION := 18;
SDL_GL_DOUBLEBUFFER := 5;
SDL_GL_DEPTH_SIZE := 6;

[c] func SDL_CreateWindow(title: ^u8, x: int, y: int, w: int, h: int, flags: int) -> ^SDL_Window;
[c] func SDL_GetWindowSurface(window: ^SDL_Window) -> ^SDL_Surface;
[c] func SDL_DestroyWindow(window: ^SDL_Window);

[c] func SDL_GL_SetSwapInterval(interval: int);
[c] func SDL_GL_CreateContext(window: ^SDL_Window) -> ^SDL_GLContext;
[c] func SDL_GL_DeleteContext(context: ^SDL_GLContext);
[c] func SDL_GL_SwapWindow(window: ^SDL_Window);

// flag isn't a flag, it's an enum
[c] func SDL_GL_SetAttribute(flag: int, value: int);

[c] func SDL_Init(foo: int) -> int;
[c] func SDL_Delay(time: s64);
[c] func SDL_Quit();

func main() -> int {
	// create our C string
	y: []u8 = [u8('h'), u8('e'), u8('l'), u8('l'), u8('o'), 0];

	if (C::SDL_Init(SDL_INIT_EVERYTHING) < 0) {
		C::printf("SDL could not be initialized!\n");
	}

	C::SDL_GL_SetAttribute(SDL_GL_CONTEXT_MAJOR_VERSION, 3);
	C::SDL_GL_SetAttribute(SDL_GL_CONTEXT_MINOR_VERSION, 2);

	C::SDL_GL_SetAttribute(SDL_GL_RED_SIZE, 5);
	C::SDL_GL_SetAttribute(SDL_GL_GREEN_SIZE, 5);
	C::SDL_GL_SetAttribute(SDL_GL_BLUE_SIZE, 5);
	C::SDL_GL_SetAttribute(SDL_GL_DOUBLEBUFFER, 1);
	C::SDL_GL_SetAttribute(SDL_GL_DEPTH_SIZE, 24);

	// weird string hack
	window := C::SDL_CreateWindow(&y[0], SDL_WINDOWPOS_CENTERED, SDL_WINDOWPOS_CENTERED, 1280, 720, SDL_WINDOW_OPENGL);
	context := C::SDL_GL_CreateContext(window);

	C::SDL_GL_SetSwapInterval(1);
	gl::C::glClearColor(0.0, 1.0, 0.0, 1.0);

	for true {
		gl::C::glClear(gl::GL_COLOR_BUFFER_BIT);
		C::SDL_GL_SwapWindow(window);
		C::SDL_Delay(2000);
	}

	C::SDL_GL_DeleteContext(context);
	C::SDL_DestroyWindow(window);
	C::SDL_Quit();

	return 0;
}
