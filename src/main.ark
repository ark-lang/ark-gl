#use gl
#use glfw
#use mem

[c] func printf(fmt: str, ...) -> int;

func main() -> int {
	if glfw::C::glfwInit() == 0 {
		C::printf("failed to initialize glfw\n");
		return -1;
	}

	glfw::C::glfwWindowHint(glfw::GLFW_SAMPLES, 4);
	glfw::C::glfwWindowHint(glfw::GLFW_CONTEXT_VERSION_MAJOR, 3);
	glfw::C::glfwWindowHint(glfw::GLFW_CONTEXT_VERSION_MINOR, 3);
	glfw::C::glfwWindowHint(glfw::GLFW_OPENGL_FORWARD_COMPAT, gl::GL_TRUE);
	glfw::C::glfwWindowHint(glfw::GLFW_OPENGL_PROFILE, glfw::GLFW_OPENGL_CORE_PROFILE);

	window: ^glfw::GLFWwindow = glfw::C::glfwCreateWindow(1280, 720, "feck off", ^glfw::GLFWmonitor(0), ^glfw::GLFWwindow(0));
	if window == ^glfw::GLFWwindow(0) {
		C::printf("failed to create window\n");
		glfw::C::glfwTerminate();
	}

	glfw::C::glfwMakeContextCurrent(window);

	if gl::C::glewInit() != 0 {
		C::printf("failed to initialize glew\n");
		glfw::C::glfwTerminate();
		return -1;
	}

	glfw::C::glfwSetInputMode(window, glfw::GLFW_STICKY_KEYS, gl::GL_TRUE);

	gl::C::glClearColor(0.2, 0.2, 0.2, 1.0);

	vertices: []C::void = [
		C::void(-1.0), C::void(-1.0), C::void(0.0),
		C::void(1.0), C::void(-1.0), C::void(0.0),
		C::void(0.0), C::void(1.0), C::void(0.0),
	];

	vertexBuffer: uint = 0;
	gl::C::glGenBuffers(1, &vertexBuffer);
	gl::C::glBindBuffer(gl::GL_ARRAY_BUFFER, vertexBuffer);
	gl::C::glBufferData(gl::GL_ARRAY_BUFFER, 9 * sizeof(f32), &vertices[0], gl::GL_STATIC_DRAW);

	for {
		gl::C::glClear(gl::GL_COLOR_BUFFER_BIT);

		gl::C::glEnableVertexAttribArray(0);
		gl::C::glBindBuffer(gl::GL_ARRAY_BUFFER, vertexBuffer);
		gl::C::glVertexAttribPointer(0, 3, gl::GL_FLOAT, gl::GL_FALSE, 0, ^C::void(0));
		gl::C::glDrawArrays(gl::GL_TRIANGLES, 0, 3);
		gl::C::glDisableVertexAttribArray(0);

		glfw::C::glfwSwapBuffers(window);
		glfw::C::glfwPollEvents();

		if (glfw::C::glfwGetKey(window, glfw::GLFW_KEY_ESCAPE) == glfw::GLFW_PRESS) {
			glfw::C::glfwTerminate();
			return 0;
		}
	}

	return 0;
}