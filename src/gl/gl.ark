#link "GL"
#link "GLU"
#link "GLEW"

pub GL_COLOR_BUFFER_BIT := 0x00004000;
pub GL_ARRAY_BUFFER := 0x8892;
pub GL_STATIC_DRAW := 0x88E4;
pub GL_ELEMENT_ARRAY_BUFFER := 0x8893;
pub GL_FLOAT := 0x1406;
pub GL_LINE := 0x1b01;

pub GL_FALSE := 0;
pub GL_TRUE := 1;

pub GL_UNSIGNED_INT := 0x1405;

pub GL_TRIANGLES := 0x0004;
pub GL_QUADS := 0x0007;
pub GL_PROJECTION := 0x1700;
pub GL_MODELVIEW := 0x1701;
pub GL_FRONT_AND_BACK := 0x0408;
pub GL_FILL := 0x1B02;

#[c] func glPolygonMode(face: int, mode: int);
#[c] func glClear(flag: int);
#[c] func glClearColor(r: f32, g: f32, b: f32, a: f32);
#[c] func glVertex2f(x: f32, y: f32);
#[c] func glVertex3f(x: f32, y: f32, z: f32);
#[c] func glColor3f(r: f32, g: f32, b: f32);
#[c] func glBegin(flag: int);
#[c] func glOrtho(left: f64, right: f64, bottom: f64, top: f64, near: f64, far: f64);
#[c] func glEnd();
#[c] func glMatrixMode(f: int);
#[c] func glLoadIdentity();
#[c] func glViewport(x: int, y: int, width: int, height: int);
#[c] func glRotatef(amount: f32, x: f32, y: f32, z: f32);

// glew
#[c] func glewInit() -> int;
#[c] func glGenBuffers(n: int, buffers: ^uint);
#[c] func glBindBuffer(target: int, buffer: uint);
#[c] func glBufferData(target: int, size: uint, data: ^C::void, usage: int);
#[c] func glGenVertexArrays(n: int, buffers: ^uint) -> int;
#[c] func glBindVertexArray(array: uint);
#[c] func glDrawElements(mode: int, count: uint, type: int, data: ^C::void);
#[c] func glEnableVertexAttribArray(index: uint);
#[c] func glVertexAttribPointer(index: uint, size: int, type: int, normalized: int, stride: uint, data: ^C::void);
#[c] func glDrawArrays(mode: int, first: int, count: uint);
#[c] func glDisableVertexAttribArray(index: uint);

/*
	Little wrapper around opengl immediate
	rendering stuff
*/

/// convert the rgb values from 0 - 255 ranges
/// to 0 - 1.0 range
pub func setColor(r: f32, g: f32, b: f32) {
	C::glColor3f(r / 255, g / 255, b / 255);
}

pub func drawRect(x: f32, y: f32, w: f32, h: f32) {
	C::glBegin(GL_TRIANGLES);
		C::glVertex2f(x, y);
		C::glVertex2f(x + w, y);
		C::glVertex2f(x + w, y + h);

		C::glVertex2f(x, y);
		C::glVertex2f(x, y + h);
		C::glVertex2f(x + w, y + h);
	C::glEnd();
}