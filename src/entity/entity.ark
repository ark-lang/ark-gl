#use std::mem

[c] func printf(fmt: ^u8, ...) -> int;

#use gl

RAND_MAX : f32 = 2147483647;

[c] func rand() -> int;

type Colour struct {
	r: f32, g: f32, b: f32,
};

func randomColour() -> ^Colour {
	col := mem::alloc<Colour>();
	@col = Colour {
		r: f32(C::rand() & 128),
		b: f32(C::rand() & 16),
		g: f32(C::rand() & 255),
	};
	return col;
}

pub type Entity struct {
	x: f32,
	y: f32,
	xDir: f32,
	yDir: f32,
	col: ^Colour,
};

pub func (Entity) NewEntity(x: f32, y: f32, xDir: f32, yDir: f32) -> ^mut Entity {
	player := mem::alloc<Entity>();
	@player = Entity{
		x: x,
		y: y,
		xDir: xDir,
		yDir: yDir,
		col: randomColour(),
	};
	return player;
}

pub func (p: ^mut Entity) update() {
	if (p.x >= f32(800 - 32)) || (p.x < f32(0)) {
		p.xDir *= -1;
	} else if (p.y >= f32(600 - 32)) || (p.y < f32(0)) {
		p.yDir *= -1;
	}

	// dont think += works here
	p.x += p.xDir;
	p.y += p.yDir;
}

pub func (p: ^mut Entity) render() {
	gl::setColor(p.col.r, p.col.g, p.col.b);
	gl::drawRect(p.x, p.y, 32, 32);
}