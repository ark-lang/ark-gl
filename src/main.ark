#use gl
#use glfw
#use mem

[c] func printf(fmt: str, ...) -> int;

func main() -> int {
	if glfw::C::glfwInit() == 0 {
		C::printf("failed to initialize glfw\n");
		return -1;
	}

	window: ^glfw::GLFWwindow = glfw::C::glfwCreateWindow(1280, 720, "Hello, 世界", ^glfw::GLFWmonitor(0), ^glfw::GLFWwindow(0));
	if window == ^glfw::GLFWwindow(0) {
		C::printf("failed to create window\n");
		glfw::C::glfwTerminate();
	}

	glfw::C::glfwMakeContextCurrent(window);

	mut ratio: f64 = 1.7777; // 1280 / 720
	mut width: int;
	mut height: int;
	mut time: f64;

	for {
		glfw::C::glfwGetFramebufferSize(window, &width, &height);

		gl::C::glViewport(0, 0, width, height);
		gl::C::glClear(gl::GL_COLOR_BUFFER_BIT);

		gl::C::glMatrixMode(gl::GL_PROJECTION);
		gl::C::glLoadIdentity();
		gl::C::glOrtho(0 - ratio, ratio, -1, 1, 1, -1);
		gl::C::glMatrixMode(gl::GL_MODELVIEW);

		gl::C::glLoadIdentity();
		time = glfw::C::glfwGetTime();
		gl::C::glRotatef(f32(time) * 50, 0, 0, 1);

		gl::C::glBegin(gl::GL_TRIANGLES);
	        gl::C::glColor3f(1, 0, 0);
	        gl::C::glVertex3f(-0.6, -0.4, 0);
	        gl::C::glColor3f(0, 1, 0);
	        gl::C::glVertex3f(0.6, -0.4, 0);
	        gl::C::glColor3f(0, 0, 1);
	        gl::C::glVertex3f(0, 0.4, 0);
        gl::C::glEnd();

		glfw::C::glfwSwapBuffers(window);
		glfw::C::glfwPollEvents();

		if (glfw::C::glfwGetKey(window, glfw::GLFW_KEY_ESCAPE) == glfw::GLFW_PRESS) {
			glfw::C::glfwDestroyWindow(window);
			glfw::C::glfwTerminate();
			return 0;
		}
	}

	return 0;
}