#use gl
#use glfw
#use game

[c] func printf(fmt: ^u8, ...) -> int;

WIDTH := 800;
HEIGHT := 600;

pub func main() -> int {
	if glfw::C::glfwInit() == 0 {
		C::printf(c"failed to initialize glfw\n");
		return -1;
	}

	window: ^glfw::GLFWwindow = glfw::C::glfwCreateWindow(C::int(WIDTH), C::int(HEIGHT), c"Hello, 世界", (^glfw::GLFWmonitor)(0), (^glfw::GLFWwindow)(0));
	if window == (^glfw::GLFWwindow)(0) {
		C::printf(c"failed to create window\n");
		glfw::C::glfwTerminate();
	}

	glfw::C::glfwMakeContextCurrent(window);

	game := game::Game::NewGame();

	for {
		// opengl setup stuff, setting opengl
		// coords to nice pixels where 0,0  is at
		// the top left instead
		gl::C::glViewport(0, 0, WIDTH, HEIGHT);
		gl::C::glClear(gl::GL_COLOR_BUFFER_BIT);
		gl::C::glMatrixMode(gl::GL_PROJECTION);
		gl::C::glLoadIdentity();
		gl::C::glOrtho(0, f64(WIDTH), f64(HEIGHT), 0, 1, -1);
		gl::C::glMatrixMode(gl::GL_MODELVIEW);
		gl::C::glLoadIdentity();

		game.update();
		game.render();

		glfw::C::glfwSwapBuffers(window);
		glfw::C::glfwPollEvents();

		// todo make the close button work
		if glfw::C::glfwGetKey(window, glfw::GLFW_KEY_ESCAPE) == glfw::GLFW_PRESS {
			glfw::C::glfwDestroyWindow(window);
			glfw::C::glfwTerminate();
			return 0;
		}
	}

	return 0;
}
